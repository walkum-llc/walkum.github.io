{"version":3,"file":"component---src-pages-shop-js-12b8de5ad44afcfe42b8.js","mappings":"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","sources":["webpack://walkum/./src/components/links/headerLink.module.css","webpack://walkum/./src/components/links/modularHeaderLink.js","webpack://walkum/./src/components/merchant/styles.module.css","webpack://walkum/./src/components/merchant/QuantityControl.js","webpack://walkum/./src/components/merchant/itemDetailModal.js","webpack://walkum/./src/components/merchant/storeItems.js","webpack://walkum/./src/components/merchant/checkout/usePaypalButtons.js","webpack://walkum/./src/components/merchant/checkout/index.js","webpack://walkum/./src/components/merchant/cart.js","webpack://walkum/./src/components/merchant/index.js","webpack://walkum/./src/pages/shop.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var blink = \"headerLink-module--blink--bdfec\";\nexport var blinkingCursor = \"headerLink-module--blinkingCursor--59495\";\nexport var phraseContainer = \"headerLink-module--phraseContainer--9d1b4\";\nexport var responsiveSvg = \"headerLink-module--responsiveSvg--e821b\";\nexport var svgButton = \"headerLink-module--svgButton--d9016\";","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { Link } from \"gatsby\";\nimport * as styles from \"./headerLink.module.css\";\n\nconst ModularHeaderLink = ({ label, linkTo=\".\", cursorColor = \"#FFD700\" }) => {\n    const [blinkSpeed, setBlinkSpeed] = useState(getRandomBlinkSpeed());\n    const accountInfo = useSelector((state) => state.account.accountInfo);\n\n    // Function to generate a random blink speed between 1s and 3s\n    function getRandomBlinkSpeed() {\n        return Math.random() * (3000 - 1000) + 1000; // Random value between 1000ms and 3000ms\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setBlinkSpeed(getRandomBlinkSpeed()); // Update blink speed every 5 seconds\n        }, 5000);\n\n        return () => clearInterval(interval); // Cleanup on unmount\n    }, []);\n\n    if (!accountInfo) {\n        return null;\n    }\n\n    return (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <div className={styles.phraseContainer}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 1200 300\"\n                width=\"100%\"\n                height=\"auto\"\n                className={styles.responsiveSvg}\n            >\n                <g transform=\"translate(600, 150)\" textAnchor=\"middle\">\n                    {/* \"walkum\" Text */}\n                    <Link to=\"/\">\n                        <text\n                            x=\"-300\"\n                            fill=\"white\"\n                            fontFamily=\"Courier\"\n                            fontSize=\"90px\"\n                            className={styles.svgButton}\n                        >\n                            {accountInfo.name}\n                        </text>\n                    </Link>\n\n                    {/* Blinking Cursor */}\n                    <text\n                        x=\"0\"\n                        fill={cursorColor}\n                        fontFamily=\"Courier\"\n                        fontSize=\"90px\"\n                        fontWeight=\"bold\"\n                        className={styles.blinkingCursor}\n                        style={{\n                            animationDuration: `${blinkSpeed}ms`,\n                            transform: \"scale(5, 5)\",\n                        }}\n                    >\n                        |\n                    </text>\n\n                    {/* Dynamic label */}\n                    <Link to={`${linkTo}`}>\n                        <text\n                            x=\"300\"\n                            fill=\"white\"\n                            fontFamily=\"Courier\"\n                            fontSize=\"90px\"\n                            className={styles.svgButton}\n                        >\n                            {label}\n                        </text>\n                    </Link>\n                </g>\n            </svg>\n        </div>\n        </div>\n    );\n};\n\nexport default ModularHeaderLink;\n","// extracted by mini-css-extract-plugin\nexport var cart = \"styles-module--cart--d7a47\";\nexport var cartIcon = \"styles-module--cartIcon--8a034\";\nexport var cartTable = \"styles-module--cartTable--d19e3\";\nexport var cartToggleButton = \"styles-module--cartToggleButton--c057a\";\nexport var cartToggleContainer = \"styles-module--cartToggleContainer--edce5\";\nexport var closeButton = \"styles-module--closeButton--5a3f6\";\nexport var del = \"styles-module--del--281ce\";\nexport var emptyCartMessage = \"styles-module--emptyCartMessage--fe4f3\";\nexport var fullScreenImage = \"styles-module--fullScreenImage--10982\";\nexport var fullScreenModal = \"styles-module--fullScreenModal--07a3c\";\nexport var grandTotal = \"styles-module--grandTotal--7e4b2\";\nexport var item = \"styles-module--item--2b47c\";\nexport var itemBackground = \"styles-module--itemBackground--30ce9\";\nexport var itemImage = \"styles-module--itemImage--d83f7\";\nexport var itemList = \"styles-module--itemList--6f49f\";\nexport var modalContent = \"styles-module--modalContent--0a097\";\nexport var priceEach = \"styles-module--priceEach--04a90\";\nexport var quant = \"styles-module--quant--b5a04\";\nexport var removeButton = \"styles-module--removeButton--45abe\";\nexport var tot = \"styles-module--tot--d3a80\";","import React from \"react\";\n\nconst QuantityControl = ({ quantity, stock, onDecrease, onIncrease }) => (\n    <div>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onDecrease();\n            }}\n\n        >\n            -\n        </button>\n        <span>   {quantity}   </span>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onIncrease();\n            }}\n        >\n            +\n        </button>\n    </div>\n);\n\nexport default QuantityControl;\n","import * as styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemDetailModal = ({\n    item,\n    onClose,\n    handleToggle,\n    handleQuantityChange,\n    isInCart,\n    cart,\n}) => {\n    const itemInCart = cart.find((cartItem) => cartItem.id === item.id); // Get item from cart\n    const [quantity, setQuantity] = useState(itemInCart ? itemInCart.quantity : 1);\n\n    // Synchronize quantity with Redux when the cart updates\n    useEffect(() => {\n        if (itemInCart) {\n            setQuantity(itemInCart.quantity);\n        }\n    }, [itemInCart]);\n\n    const handleQuantityUpdate = (newQuantity) => {\n        const clampedQuantity = Math.min(Math.max(newQuantity, 1), item.stock);\n        setQuantity(clampedQuantity);\n        handleQuantityChange(item, clampedQuantity); // Update Redux store\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                onClose(); // Close modal on Escape key\n            }\n        };\n\n        // Add event listener for Escape key\n        document.addEventListener(\"keydown\", handleKeyDown);\n\n        // Cleanup listener on unmount\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [onClose]);\n\n    return (\n        <div className={styles.fullScreenModal} onClick={onClose}>\n            <div\n                className={styles.modalContent}\n                onClick={(e) => e.stopPropagation()} // Prevent closing on modal content click\n            >\n                <button className={styles.closeButton} onClick={onClose}>\n                    &times; Close\n                </button>\n                <img\n                    src={item.image}\n                    alt={item.name}\n                    className={styles.fullScreenImage}\n                />\n                <h3>{item.name}</h3>\n                <p>{item.description}</p>\n                <p>Price: ${item.price}</p>\n                <p>Stock: {item.stock}</p>\n\n                {isInCart(item.id) && (\n                    <div>\n                        <label htmlFor=\"quantityInput\">Quantity: </label>\n                        <QuantityControl\n                            quantity={quantity}\n                            stock={item.stock}\n                            onDecrease={() => handleQuantityUpdate(quantity - 1)}\n                            onIncrease={() => handleQuantityUpdate(quantity + 1)}\n                        />\n                    </div>\n                )}\n\n                <button\n                    onClick={() => handleToggle(item)}\n                    className={isInCart(item.id) ? styles.removeButton : \"\"}\n                    disabled={item.stock <= 0}\n                >\n                    {isInCart(item.id) ? \"Remove from Cart\" : \"Add to Cart\"}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemDetailModal;\n","import * as styles from \"./styles.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleItemInCart,\n    updateItemQuantity,\n    selectCart,\n} from \"../../state/onlineStoreSlice\";\nimport ItemDetailModal from \"./itemDetailModal\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemList = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n    const storeItems = useSelector((state) => state.onlineStore.storeItems);\n\n    const [selectedItem, setSelectedItem] = useState(null);\n    const [isSingleColumn, setIsSingleColumn] = useState(false);\n\n    // Check for single-column layout using a media query\n    useEffect(() => {\n        const checkColumnLayout = () => {\n            const element = document.querySelector(`.${styles.itemList}`);\n            if (element) {\n                const computedStyle = getComputedStyle(element);\n                const gridTemplateColumns = computedStyle.getPropertyValue(\"grid-template-columns\");\n                setIsSingleColumn(gridTemplateColumns.split(\" \").length === 1);\n            }\n        };\n\n        checkColumnLayout();\n        window.addEventListener(\"resize\", checkColumnLayout);\n\n        return () => {\n            window.removeEventListener(\"resize\", checkColumnLayout);\n        };\n    }, []);\n\n    const handleToggle = (item) => {\n        dispatch(toggleItemInCart(item));\n    };\n\n    const handleQuantityChange = (item, quantity) => {\n        dispatch(updateItemQuantity({ id: item.id, quantity }));\n    };\n\n    const isInCart = (id) => cart.some((item) => item.id === id);\n\n    const handleItemClick = (item) => {\n        if (!isSingleColumn) {\n            setSelectedItem(item); // Only allow modal if not single-column\n        }\n    };\n\n    const handleCloseModal = () => {\n        setSelectedItem(null);\n    };\n\n    return (\n        <div className={styles.itemList}>\n            {storeItems.map((item, index) => {\n                const itemInCart = cart.find((cartItem) => cartItem.id === item.id);\n                const quantity = itemInCart ? itemInCart.quantity : 1;\n\n                return (\n                    <div\n                        key={index}\n                        className={styles.item}\n                        onClick={() => handleItemClick(item)}\n                    >\n                        <img\n                            src={item.image}\n                            alt={item.name}\n                            className={styles.itemImage}\n                        />\n                        <h3>{item.name}</h3>\n                        <p>{item.description}</p>\n                        <p>${item.price}</p>\n                        <p># Remaining: {item.stock}</p>\n\n                        {isInCart(item.id) ? (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                className={styles.removeButton}\n                            >\n                                Remove from Cart\n                            </button>\n                        ) : (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                disabled={item.stock <= 0}\n                            >\n                                Add to Cart\n                            </button>\n                        )}\n\n                        {isInCart(item.id) && (\n                            <QuantityControl\n                                quantity={quantity}\n                                stock={item.stock}\n                                onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                />\n                        )}\n                    </div>\n                );\n            })}\n\n            {!isSingleColumn && selectedItem && (\n                <ItemDetailModal\n                    item={selectedItem}\n                    onClose={handleCloseModal}\n                    handleToggle={handleToggle}\n                    handleQuantityChange={handleQuantityChange}\n                    cart={cart}\n                    isInCart={isInCart}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ItemList;\n","import { useEffect, useRef } from \"react\";\n\nconst usePaypalButtons = ({ cart, paypalRef, onApprove, createOrder }) => {\n    const paypalRenderedRef = useRef(false);\n\n    useEffect(() => {\n        console.log(\"\\nEnvironment Variables:\", JSON.stringify({\n            PAYPAL_CLIENT_ID: process.env.PAYPAL_CLIENT_ID ? \"***\" : undefined,\n            SERVER_IP: process.env.SERVER_IP,\n            PORT: process.env.PORT,\n        },null,2));\n\n        if (paypalRenderedRef.current) {\n            console.log(\"PayPal buttons already rendered. Skipping initialization.\");\n            return;\n        }\n\n        const script = document.createElement(\"script\");\n\n        // Check if the user is on a mobile device\n        const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n\n        let paypalEnv = process.env.NODE_ENV === 'production' ? 'https://www.paypal.com' : 'https://www.sandbox.paypal.com';\n        let buyerCountryParam = process.env.NODE_ENV !== 'production' ? '&buyer-country=US' : '';\n\n        // Set script.src with shared parameters\n        script.src = `${paypalEnv}/sdk/js?client-id=${encodeURIComponent(process.env.PAYPAL_CLIENT_ID)}${buyerCountryParam}&currency=USD&components=buttons&enable-funding=paypal,venmo,card&commit=true&intent=capture${isMobile ? '&integration-date=2021-02-01' : ''}`;\n\n        script.async = true;\n\n        script.onload = () => {\n            if (window.paypal && paypalRef.current) {\n                paypalRenderedRef.current = true;\n                window.paypal.Buttons({\n                    style: {\n                        shape: \"pill\",\n                        layout: \"vertical\",\n                        color: \"blue\",\n                        label: \"pay\",\n                    },\n                    createOrder,\n                    onApprove,\n                }).render(paypalRef.current);\n            } else {\n                console.error(\"PayPal SDK not loaded properly.\");\n            }\n        };\n\n        document.body.appendChild(script);\n\n        return () => {\n            if (paypalRenderedRef.current) {\n                console.log(\"Cleaning up PayPal buttons.\");\n                paypalRenderedRef.current = false;\n            }\n\n            if (document.body.contains(script)) {\n                document.body.removeChild(script);\n            }\n        };\n    }, [cart, paypalRef, createOrder, onApprove]);\n};\n\nexport default usePaypalButtons;\n","import React, { useRef } from \"react\";\nimport { clearCart } from \"../../../state/onlineStoreSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as styles from \"./index.module.css\";\nimport usePaypalButtons from \"./usePaypalButtons\";\n\nconst PaypalButton = ({ cart }) => {\n    const dispatch = useDispatch();\n    const paypalRef = useRef(null);\n\n    const serverIP = process.env.SERVER_IP;\n    const port = process.env.PORT;\n\n    const merchantEmail = useSelector((state) => state.account.accountInfo.email);\n\n    const createOrder = async (data, actions) => {\n        try {\n            const totalAmount = cart.reduce(\n                (sum, item) => sum + parseFloat(item.price) * item.quantity,\n                0\n            ).toFixed(2);\n\n            const response = await fetch(`https://${serverIP}:${port}/api/orders`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ cart }),\n            });\n\n            const orderData = await response.json();\n            console.log(\"createOrder Response:\", orderData);\n\n            if (orderData.id) {\n                return orderData.id;\n            }\n            throw new Error(\"Failed to create order\");\n        } catch (error) {\n            console.error(\"createOrder Error:\", error);\n            throw new Error(\"Could not initiate PayPal Checkout\");\n        }\n    };\n\n    const onApprove = async (data, actions) => {\n        try {\n            const response = await fetch(\n                `https://${serverIP}:${port}/api/orders/${data.orderID}/capture`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({ cart, merchantEmail }),\n                }\n            );\n\n            const orderData = await response.json();\n            console.log(\"onApprove Response:\", orderData);\n\n            if (orderData?.purchase_units?.[0]?.payments?.captures?.[0]) {\n                const transaction =\n                    orderData?.purchase_units?.[0]?.payments?.captures?.[0];\n                console.log(\"Transaction completed:\", transaction);\n\n                dispatch(clearCart());\n            } else {\n                throw new Error(\"Capture failed\");\n            }\n        } catch (error) {\n            console.error(\"onApprove Error:\", error);\n            alert(\"Sorry, your transaction could not be processed.\");\n        }\n    };\n\n    // Initialize PayPal buttons\n    usePaypalButtons({ cart, paypalRef, createOrder, onApprove });\n\n    return (\n        <div ref={paypalRef}></div>\n    );\n};\n\nexport default PaypalButton;\n","import * as styles from \"./styles.module.css\";\nimport * as otherstyles from \"../../styles/index.module.css\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCart, updateItemQuantity, toggleItemInCart } from '../../state/onlineStoreSlice';\nimport PayPalButtons from \"./checkout\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ViewCart = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n\n    const handleQuantityChange = (item, quantity) => {\n        const newQuantity = Math.max(1, Math.min(quantity, item.stock)); // Limit between 1 and stock\n        dispatch(updateItemQuantity({ id: item.id, quantity: newQuantity }));\n    };\n\n    const handleRemoveItem = (item) => {\n        dispatch(toggleItemInCart(item)); // Use toggle to remove item\n    };\n\n    if (!cart || cart.length === 0) {\n        return (\n            <div className={styles.emptyCartMessage}>\n                <p>Your cart is empty</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.cart}>\n            <br />\n            <table className={styles.cartTable}>\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th className={styles.quant}>Quantity</th>\n                        <th className={styles.tot}>Total</th>\n                        <th className={styles.del}>X</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cart.map((item, index) => {\n                        const price = Number(item.price) || 0;\n                        const quantity = Number(item.quantity) || 0;\n                        const total = price * quantity;\n\n                        return (\n                            <tr key={index}>\n                                <td className={otherstyles.center}>\n                                    {item.name || \"Unnamed Item\"}<br />\n                                    <span className={styles.priceEach}>${price.toFixed(2)}</span>\n                                </td>\n                                <td>\n                                    <QuantityControl\n                                        quantity={quantity}\n                                        stock={item.stock}\n                                        onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                        onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                        />\n                                </td>\n                                <td className={styles.tot}>${total.toFixed(2)}</td>\n                                <td>\n                                    <button\n                                        onClick={() => handleRemoveItem(item)}\n                                        className={styles.removeButton}\n                                    >\n                                        X\n                                    </button>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <h3 className={styles.grandTotal}>\n                Grand Total: $\n                {cart.reduce(\n                    (total, item) =>\n                        total + (Number(item.price) || 0) * (Number(item.quantity) || 0),\n                    0\n                ).toFixed(2)}\n            </h3>\n\n            <PayPalButtons cart={cart} />\n        </div>\n    );\n};\n\nexport default ViewCart;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport StoreItems from './storeItems';\nimport ShoppingCart from './cart';\nimport Footer from '../footer';\nimport ModularHeaderLink from \"../links/modularHeaderLink\";\nimport {\n    toggleCartView,\n    selectCartVisibility,\n    updateStoreItems,\n    cleanCart,\n} from '../../state/onlineStoreSlice';\nimport config from '../../../config';\nimport * as styles from \"./styles.module.css\";\nimport * as otherstyles from \"../../styles/index.module.css\";\nimport {\n    useKeyValue,\n    useMenu,\n} from \"../spreadsheet/useSheet\";\n\nconst ShoppingPage = () => {\n    const dispatch = useDispatch();\n    const isCartVisible = useSelector(selectCartVisibility);\n    const storeName = useSelector(state => state.account.accountInfo.store)\n\n    const { loading, error, data: menuData } = useMenu({\n        spreadsheetId: config.spreadsheets.account.id,\n        sheetName: \"products\",\n    });\n\n    useEffect(() => {\n        if (!loading && !error && menuData) {\n            dispatch(updateStoreItems(menuData));\n            dispatch(cleanCart()); // Validate cart after store items update\n        }\n    }, [loading, error, menuData, dispatch]);\n\n    const handleToggleCart = () => {\n        dispatch(toggleCartView());\n    };\n\n    if (loading) return <p>Loading store items...</p>;\n    if (error) return <p>Error loading store items: {error}</p>;\n\n    return (\n        <div>\n            <div className={otherstyles.container}>\n                <ModularHeaderLink\n                    label=\"merch\"\n                    cursorColor=\"#39FF14\"\n                    />\n                <button className={styles.cartToggleButton} onClick={handleToggleCart}>\n                {isCartVisible ? (\n                    <div className={styles.cartToggleContainer}>\n                        <span>Hide</span>\n                        <span className={styles.cartIcon} role=\"img\" aria-label=\"cart\">{'\\u{1F6D2}'}</span>\n                    </div>\n                ) : (\n                    <div className={styles.cartToggleContainer}>\n                        <span>Your Cart</span>\n                        <span className={styles.cartIcon} role=\"img\" aria-label=\"cart\">{'\\u{1F6D2}'}</span>\n                    </div>\n                )}\n\n                </button>\n\n                {isCartVisible && <ShoppingCart />}\n            </div>\n            <div className={styles.itemListContainer}>\n                <StoreItems />\n            </div>\n            <div className={otherstyles.container}>\n                <Footer />\n            </div>\n        </div>\n    );\n};\n\nexport default ShoppingPage;\n","import React from \"react\";\nimport MerchantStore from \"../components/merchant\"\nimport SEO from \"../components/SEO\";\n\nconst config = require(\"../../config\");\n\nconst MerchantPage = () => {\n\n    return (\n        <div>\n            <SEO\n                title=\"Walkum | Merchant\"\n                description=\"Walkum merchandise. Quality custom products. walkum, records, shop, merchant, homes, cutting board, guitar, bass\"\n                keywords=\"walkum, records, shop, merchant, homes, cutting board, guitar, bass\"\n                url=\"https://walkum.xyz/shop\"\n                />\n            <main>\n                <MerchantStore />\n            </main>\n        </div>\n    )\n};\n\nexport default MerchantPage;\n"],"names":["svgButton","_ref","label","linkTo","cursorColor","blinkSpeed","setBlinkSpeed","useState","getRandomBlinkSpeed","accountInfo","useSelector","state","account","Math","random","useEffect","interval","setInterval","clearInterval","React","style","display","justifyContent","className","xmlns","viewBox","width","height","transform","textAnchor","Link","to","x","fill","fontFamily","fontSize","styles","name","fontWeight","animationDuration","cartIcon","cartTable","cartToggleButton","cartToggleContainer","closeButton","del","emptyCartMessage","fullScreenImage","fullScreenModal","grandTotal","itemImage","itemList","modalContent","priceEach","quant","removeButton","tot","quantity","stock","onDecrease","onIncrease","onClick","e","stopPropagation","item","onClose","handleToggle","handleQuantityChange","isInCart","cart","itemInCart","find","cartItem","id","setQuantity","handleQuantityUpdate","newQuantity","clampedQuantity","min","max","handleKeyDown","event","key","document","addEventListener","removeEventListener","src","image","alt","description","price","htmlFor","QuantityControl","disabled","ItemList","dispatch","useDispatch","selectCart","storeItems","onlineStore","selectedItem","setSelectedItem","isSingleColumn","setIsSingleColumn","checkColumnLayout","element","querySelector","gridTemplateColumns","getComputedStyle","getPropertyValue","split","length","window","toggleItemInCart","updateItemQuantity","some","map","index","handleItemClick","ItemDetailModal","handleCloseModal","paypalRef","onApprove","createOrder","paypalRenderedRef","useRef","console","log","JSON","stringify","PAYPAL_CLIENT_ID","SERVER_IP","process","PORT","current","script","createElement","isMobile","test","navigator","userAgent","paypalEnv","encodeURIComponent","async","onload","paypal","Buttons","shape","layout","color","render","error","body","appendChild","contains","removeChild","serverIP","port","merchantEmail","email","usePaypalButtons","data","actions","reduce","sum","parseFloat","toFixed","response","fetch","method","headers","orderData","json","Error","_orderData$purchase_u","_orderData$purchase_u2","_orderData$purchase_u3","_orderData$purchase_u4","orderID","purchase_units","payments","captures","_orderData$purchase_u5","_orderData$purchase_u6","_orderData$purchase_u7","_orderData$purchase_u8","transaction","clearCart","alert","ref","ViewCart","Number","total","otherstyles","handleRemoveItem","PayPalButtons","ShoppingPage","isCartVisible","selectCartVisibility","loading","menuData","store","useMenu","spreadsheetId","config","spreadsheets","sheetName","updateStoreItems","cleanCart","ModularHeaderLink","handleToggleCart","toggleCartView","role","ShoppingCart","StoreItems","Footer","require","MerchantPage","SEO","title","keywords","url","MerchantStore"],"sourceRoot":""}