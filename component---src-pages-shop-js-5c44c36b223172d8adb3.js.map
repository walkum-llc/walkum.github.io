{"version":3,"file":"component---src-pages-shop-js-5c44c36b223172d8adb3.js","mappings":"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","sources":["webpack://walkum/./src/components/header.js","webpack://walkum/./src/styles/shopping.module.css","webpack://walkum/./src/components/merchant/QuantityControl.js","webpack://walkum/./src/components/merchant/itemDetailModal.js","webpack://walkum/./src/components/merchant/storeItems.js","webpack://walkum/./src/components/merchant/checkout/usePaypalButtons.js","webpack://walkum/./src/components/merchant/checkout/index.js","webpack://walkum/./src/components/merchant/cart.js","webpack://walkum/./src/components/merchant/index.js","webpack://walkum/./src/pages/shop.js"],"sourcesContent":["import * as styles from \"../styles/index.module.css\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { useSelector } from 'react-redux';\n\nconst IndexPage = ({ prefix }) => {\n    const accountInfo = useSelector((state) => state.account.accountInfo);\n\n    if (!accountInfo) {\n        return null;\n    }\n\n    return (\n        <header>\n            <div className={styles.headerContainer}>\n                <h1 className={styles.headerTitle}>\n                    {prefix ? `${prefix} | ` : \"\"}\n                    <Link to=\"/\" className={styles.headerLink}>\n                        {accountInfo.name}\n                    </Link>\n                </h1>\n            </div>\n        </header>\n    );\n};\n\nexport default IndexPage;\n","// extracted by mini-css-extract-plugin\nexport var cart = \"shopping-module--cart--3c207\";\nexport var cartIcon = \"shopping-module--cartIcon--c4b84\";\nexport var cartToggleButton = \"shopping-module--cartToggleButton--3db78\";\nexport var cartToggleContainer = \"shopping-module--cartToggleContainer--3c934\";\nexport var closeButton = \"shopping-module--closeButton--fdfa2\";\nexport var emptyCartMessage = \"shopping-module--emptyCartMessage--bcb9c\";\nexport var fullScreenImage = \"shopping-module--fullScreenImage--3e206\";\nexport var fullScreenModal = \"shopping-module--fullScreenModal--d5a88\";\nexport var item = \"shopping-module--item--7b82f\";\nexport var itemBackground = \"shopping-module--itemBackground--65546\";\nexport var itemImage = \"shopping-module--itemImage--78d3d\";\nexport var itemList = \"shopping-module--itemList--d6d43\";\nexport var modalContent = \"shopping-module--modalContent--12e4c\";\nexport var priceEach = \"shopping-module--priceEach--2c4e6\";\nexport var removeButton = \"shopping-module--removeButton--04c91\";","import React from \"react\";\n\nconst QuantityControl = ({ quantity, stock, onDecrease, onIncrease }) => (\n    <div>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onDecrease();\n            }}\n\n        >\n            -\n        </button>\n        <span>   {quantity}   </span>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onIncrease();\n            }}\n        >\n            +\n        </button>\n    </div>\n);\n\nexport default QuantityControl;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemDetailModal = ({\n    item,\n    onClose,\n    handleToggle,\n    handleQuantityChange,\n    isInCart,\n    cart,\n}) => {\n    const itemInCart = cart.find((cartItem) => cartItem.id === item.id); // Get item from cart\n    const [quantity, setQuantity] = useState(itemInCart ? itemInCart.quantity : 1);\n\n    // Synchronize quantity with Redux when the cart updates\n    useEffect(() => {\n        if (itemInCart) {\n            setQuantity(itemInCart.quantity);\n        }\n    }, [itemInCart]);\n\n    const handleQuantityUpdate = (newQuantity) => {\n        const clampedQuantity = Math.min(Math.max(newQuantity, 1), item.stock);\n        setQuantity(clampedQuantity);\n        handleQuantityChange(item, clampedQuantity); // Update Redux store\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                onClose(); // Close modal on Escape key\n            }\n        };\n\n        // Add event listener for Escape key\n        document.addEventListener(\"keydown\", handleKeyDown);\n\n        // Cleanup listener on unmount\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [onClose]);\n\n    return (\n        <div className={styles.fullScreenModal} onClick={onClose}>\n            <div\n                className={styles.modalContent}\n                onClick={(e) => e.stopPropagation()} // Prevent closing on modal content click\n            >\n                <button className={styles.closeButton} onClick={onClose}>\n                    &times; Close\n                </button>\n                <img\n                    src={item.image}\n                    alt={item.name}\n                    className={styles.fullScreenImage}\n                />\n                <h3>{item.name}</h3>\n                <p>{item.description}</p>\n                <p>Price: ${item.price}</p>\n                <p>Stock: {item.stock}</p>\n\n                {isInCart(item.id) && (\n                    <div>\n                        <label htmlFor=\"quantityInput\">Quantity: </label>\n                        <QuantityControl\n                            quantity={quantity}\n                            stock={item.stock}\n                            onDecrease={() => handleQuantityUpdate(quantity - 1)}\n                            onIncrease={() => handleQuantityUpdate(quantity + 1)}\n                        />\n                    </div>\n                )}\n\n                <button\n                    onClick={() => handleToggle(item)}\n                    className={isInCart(item.id) ? styles.removeButton : \"\"}\n                    disabled={item.stock <= 0}\n                >\n                    {isInCart(item.id) ? \"Remove from Cart\" : \"Add to Cart\"}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemDetailModal;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleItemInCart,\n    updateItemQuantity,\n    selectCart,\n} from \"../../state/onlineStoreSlice\";\nimport ItemDetailModal from \"./itemDetailModal\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemList = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n    const storeItems = useSelector((state) => state.onlineStore.storeItems);\n\n    const [selectedItem, setSelectedItem] = useState(null);\n    const [isSingleColumn, setIsSingleColumn] = useState(false);\n\n    // Check for single-column layout using a media query\n    useEffect(() => {\n        const checkColumnLayout = () => {\n            const element = document.querySelector(`.${styles.itemList}`);\n            if (element) {\n                const computedStyle = getComputedStyle(element);\n                const gridTemplateColumns = computedStyle.getPropertyValue(\"grid-template-columns\");\n                setIsSingleColumn(gridTemplateColumns.split(\" \").length === 1);\n            }\n        };\n\n        checkColumnLayout();\n        window.addEventListener(\"resize\", checkColumnLayout);\n\n        return () => {\n            window.removeEventListener(\"resize\", checkColumnLayout);\n        };\n    }, []);\n\n    const handleToggle = (item) => {\n        dispatch(toggleItemInCart(item));\n    };\n\n    const handleQuantityChange = (item, quantity) => {\n        dispatch(updateItemQuantity({ id: item.id, quantity }));\n    };\n\n    const isInCart = (id) => cart.some((item) => item.id === id);\n\n    const handleItemClick = (item) => {\n        if (!isSingleColumn) {\n            setSelectedItem(item); // Only allow modal if not single-column\n        }\n    };\n\n    const handleCloseModal = () => {\n        setSelectedItem(null);\n    };\n\n    return (\n        <div className={styles.itemList}>\n            {storeItems.map((item, index) => {\n                const itemInCart = cart.find((cartItem) => cartItem.id === item.id);\n                const quantity = itemInCart ? itemInCart.quantity : 1;\n\n                return (\n                    <div\n                        key={index}\n                        className={styles.item}\n                        onClick={() => handleItemClick(item)}\n                    >\n                        <img\n                            src={item.image}\n                            alt={item.name}\n                            className={styles.itemImage}\n                        />\n                        <h3>{item.name}</h3>\n                        <p>{item.description}</p>\n                        <p>${item.price}</p>\n                        <p># Remaining: {item.stock}</p>\n\n                        {isInCart(item.id) ? (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                className={styles.removeButton}\n                            >\n                                Remove from Cart\n                            </button>\n                        ) : (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                disabled={item.stock <= 0}\n                            >\n                                Add to Cart\n                            </button>\n                        )}\n\n                        {isInCart(item.id) && (\n                            <QuantityControl\n                                quantity={quantity}\n                                stock={item.stock}\n                                onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                />\n                        )}\n                    </div>\n                );\n            })}\n\n            {!isSingleColumn && selectedItem && (\n                <ItemDetailModal\n                    item={selectedItem}\n                    onClose={handleCloseModal}\n                    handleToggle={handleToggle}\n                    handleQuantityChange={handleQuantityChange}\n                    cart={cart}\n                    isInCart={isInCart}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ItemList;\n","import { useEffect, useRef } from \"react\";\n\nconst usePaypalButtons = ({ cart, paypalRef, onApprove, createOrder }) => {\n    const paypalRenderedRef = useRef(false);\n\n    useEffect(() => {\n        console.log(\"\\nEnvironment Variables:\", JSON.stringify({\n            PAYPAL_CLIENT_ID: process.env.PAYPAL_CLIENT_ID ? \"***\" : undefined,\n            SERVER_IP: process.env.SERVER_IP,\n            PORT: process.env.PORT,\n        },null,2));\n\n        if (paypalRenderedRef.current) {\n            console.log(\"PayPal buttons already rendered. Skipping initialization.\");\n            return;\n        }\n\n        const script = document.createElement(\"script\");\n\n        let paypalEnv = process.env.NODE_ENV === 'production' ? 'https://www.paypal.com' : 'https://www.sandbox.paypal.com';\n        let buyerCountryParam = process.env.NODE_ENV !== 'production' ? '&buyer-country=US' : '';\n\n        script.src = `${paypalEnv}/sdk/js?client-id=${encodeURIComponent(process.env.PAYPAL_CLIENT_ID)}${buyerCountryParam}&currency=USD&components=buttons&enable-funding=paypal,venmo,card`;\n\n        script.async = true;\n\n        script.onload = () => {\n            if (window.paypal && paypalRef.current) {\n                paypalRenderedRef.current = true;\n                window.paypal.Buttons({\n                    style: {\n                        shape: \"pill\",\n                        layout: \"vertical\",\n                        color: \"blue\",\n                        label: \"pay\",\n                    },\n                    createOrder,\n                    onApprove,\n                }).render(paypalRef.current);\n            }\n        };\n\n        document.body.appendChild(script);\n\n        return () => {\n            if (paypalRenderedRef.current) {\n                console.log(\"Cleaning up PayPal buttons.\");\n                paypalRenderedRef.current = false;\n            }\n\n            if (document.body.contains(script)) {\n                document.body.removeChild(script);\n            }\n        };\n    }, [cart, paypalRef, createOrder, onApprove]);\n};\n\nexport default usePaypalButtons;\n","import React, { useRef } from \"react\";\nimport { clearCart } from \"../../../state/onlineStoreSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as styles from \"./index.module.css\";\nimport usePaypalButtons from \"./usePaypalButtons\";\n\nconst PaypalButton = ({ cart }) => {\n    const dispatch = useDispatch();\n    const paypalRef = useRef(null);\n\n    const serverIP = process.env.SERVER_IP;\n    const port = process.env.PORT;\n\n    const merchantEmail = useSelector((state) => state.account.accountInfo.email);\n\n    const createOrder = async (data, actions) => {\n        try {\n            const totalAmount = cart.reduce(\n                (sum, item) => sum + parseFloat(item.price) * item.quantity,\n                0\n            ).toFixed(2);\n\n            const response = await fetch(`https://${serverIP}:${port}/api/orders`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ cart }),\n            });\n\n            const orderData = await response.json();\n            console.log(\"createOrder Response:\", orderData);\n\n            if (orderData.id) {\n                return orderData.id;\n            }\n            throw new Error(\"Failed to create order\");\n        } catch (error) {\n            console.error(\"createOrder Error:\", error);\n            throw new Error(\"Could not initiate PayPal Checkout\");\n        }\n    };\n\n    const onApprove = async (data, actions) => {\n        try {\n            const response = await fetch(\n                `https://${serverIP}:${port}/api/orders/${data.orderID}/capture`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({ cart, merchantEmail }),\n                }\n            );\n\n            const orderData = await response.json();\n            console.log(\"onApprove Response:\", orderData);\n\n            if (orderData?.purchase_units?.[0]?.payments?.captures?.[0]) {\n                const transaction =\n                    orderData?.purchase_units?.[0]?.payments?.captures?.[0];\n                console.log(\"Transaction completed:\", transaction);\n\n                dispatch(clearCart());\n            } else {\n                throw new Error(\"Capture failed\");\n            }\n        } catch (error) {\n            console.error(\"onApprove Error:\", error);\n            alert(\"Sorry, your transaction could not be processed.\");\n        }\n    };\n\n    // Initialize PayPal buttons\n    usePaypalButtons({ cart, paypalRef, createOrder, onApprove });\n\n    return (\n        <div ref={paypalRef}></div>\n    );\n};\n\nexport default PaypalButton;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport * as otherstyles from \"../../styles/index.module.css\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCart, updateItemQuantity, toggleItemInCart } from '../../state/onlineStoreSlice';\nimport PayPalButtons from \"./checkout\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ViewCart = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n\n    const handleQuantityChange = (item, quantity) => {\n        const newQuantity = Math.max(1, Math.min(quantity, item.stock)); // Limit between 1 and stock\n        dispatch(updateItemQuantity({ id: item.id, quantity: newQuantity }));\n    };\n\n    const handleRemoveItem = (item) => {\n        dispatch(toggleItemInCart(item)); // Use toggle to remove item\n    };\n\n    if (!cart || cart.length === 0) {\n        return (\n            <div className={styles.emptyCartMessage}>\n                <p>Your cart is empty</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.cart}>\n            <br />\n            <table className={styles.cartTable}>\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                        <th>Remove</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cart.map((item, index) => {\n                        const price = Number(item.price) || 0;\n                        const quantity = Number(item.quantity) || 0;\n                        const total = price * quantity;\n\n                        return (\n                            <tr key={index}>\n                                <td className={otherstyles.center}>\n                                    {item.name || \"Unnamed Item\"}<br />\n                                    <span className={styles.priceEach}>${price.toFixed(2)}</span>\n                                </td>\n                                <td>\n                                    <QuantityControl\n                                        quantity={quantity}\n                                        stock={item.stock}\n                                        onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                        onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                        />\n                                </td>\n                                <td>${total.toFixed(2)}</td>\n                                <td>\n                                    <button\n                                        onClick={() => handleRemoveItem(item)}\n                                        className={styles.removeButton}\n                                    >\n                                        Remove\n                                    </button>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <h3 className={styles.grandTotal}>\n                Grand Total: $\n                {cart.reduce(\n                    (total, item) =>\n                        total + (Number(item.price) || 0) * (Number(item.quantity) || 0),\n                    0\n                ).toFixed(2)}\n            </h3>\n\n            <PayPalButtons cart={cart} />\n        </div>\n    );\n};\n\nexport default ViewCart;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport StoreItems from './storeItems';\nimport ShoppingCart from './cart';\nimport Footer from '../footer';\nimport Header from '../header';\nimport {\n    toggleCartView,\n    selectCartVisibility,\n    updateStoreItems,\n    cleanCart,\n} from '../../state/onlineStoreSlice';\nimport config from '../../../config';\nimport * as styles from \"../../styles/shopping.module.css\";\nimport * as otherstyles from \"../../styles/index.module.css\";\nimport {\n    useKeyValue,\n    useMenu,\n} from \"../spreadsheet/useSheet\";\n\nconst ShoppingPage = () => {\n    const dispatch = useDispatch();\n    const isCartVisible = useSelector(selectCartVisibility);\n    const storeName = useSelector(state => state.account.accountInfo.store)\n\n    const { loading, error, data: menuData } = useMenu({\n        spreadsheetId: config.spreadsheets.account.id,\n        sheetName: \"products\",\n    });\n\n    useEffect(() => {\n        if (!loading && !error && menuData) {\n            dispatch(updateStoreItems(menuData));\n            dispatch(cleanCart()); // Validate cart after store items update\n        }\n    }, [loading, error, menuData, dispatch]);\n\n    const handleToggleCart = () => {\n        dispatch(toggleCartView());\n    };\n\n    if (loading) return <p>Loading store items...</p>;\n    if (error) return <p>Error loading store items: {error}</p>;\n\n    return (\n        <div>\n            <div className={otherstyles.container}>\n                <Header prefix={storeName}/>\n                <button className={styles.cartToggleButton} onClick={handleToggleCart}>\n                {isCartVisible ? (\n                    <div className={styles.cartToggleContainer}>\n                        <span>Hide</span>\n                        <span className={styles.cartIcon} role=\"img\" aria-label=\"cart\">{'\\u{1F6D2}'}</span>\n                    </div>\n                ) : (\n                    <div className={styles.cartToggleContainer}>\n                        <span>Your Cart</span>\n                        <span className={styles.cartIcon} role=\"img\" aria-label=\"cart\">{'\\u{1F6D2}'}</span>\n                    </div>\n                )}\n\n                </button>\n\n                {isCartVisible && <ShoppingCart />}\n            </div>\n            <div className={styles.itemListContainer}>\n                <StoreItems />\n            </div>\n            <div className={otherstyles.container}>\n                <Footer />\n            </div>\n        </div>\n    );\n};\n\nexport default ShoppingPage;\n","import React from \"react\";\nimport MerchantStore from \"../components/merchant\"\nimport SEO from \"../components/SEO\";\n\nconst config = require(\"../../config\");\n\nconst MerchantPage = () => {\n\n    return (\n        <div>\n            <SEO\n                title=\"Walkum | Merchant\"\n                description=\"Walkum merchandise. Quality custom products. walkum, records, shop, merchant, homes, cutting board, guitar, bass\"\n                keywords=\"walkum, records, shop, merchant, homes, cutting board, guitar, bass\"\n                url=\"https://walkum.xyz/shop\"\n                />\n            <main>\n                <MerchantStore />\n            </main>\n        </div>\n    )\n};\n\nexport default MerchantPage;\n"],"names":["_ref","prefix","accountInfo","useSelector","state","account","React","className","styles","Link","to","name","cartIcon","cartToggleButton","cartToggleContainer","closeButton","emptyCartMessage","fullScreenImage","fullScreenModal","itemImage","itemList","modalContent","priceEach","removeButton","quantity","stock","onDecrease","onIncrease","onClick","e","stopPropagation","item","onClose","handleToggle","handleQuantityChange","isInCart","cart","itemInCart","find","cartItem","id","setQuantity","useState","useEffect","handleQuantityUpdate","newQuantity","clampedQuantity","Math","min","max","handleKeyDown","event","key","document","addEventListener","removeEventListener","src","image","alt","description","price","htmlFor","QuantityControl","disabled","ItemList","dispatch","useDispatch","selectCart","storeItems","onlineStore","selectedItem","setSelectedItem","isSingleColumn","setIsSingleColumn","checkColumnLayout","element","querySelector","gridTemplateColumns","getComputedStyle","getPropertyValue","split","length","window","toggleItemInCart","updateItemQuantity","some","map","index","handleItemClick","ItemDetailModal","handleCloseModal","paypalRef","onApprove","createOrder","paypalRenderedRef","useRef","console","log","JSON","stringify","PAYPAL_CLIENT_ID","SERVER_IP","process","PORT","current","script","createElement","paypalEnv","encodeURIComponent","async","onload","paypal","Buttons","style","shape","layout","color","label","render","body","appendChild","contains","removeChild","serverIP","port","merchantEmail","email","usePaypalButtons","data","actions","reduce","sum","parseFloat","toFixed","response","fetch","method","headers","orderData","json","Error","error","_orderData$purchase_u","_orderData$purchase_u2","_orderData$purchase_u3","_orderData$purchase_u4","orderID","purchase_units","payments","captures","_orderData$purchase_u5","_orderData$purchase_u6","_orderData$purchase_u7","_orderData$purchase_u8","transaction","clearCart","alert","ref","ViewCart","Number","total","otherstyles","handleRemoveItem","PayPalButtons","ShoppingPage","isCartVisible","selectCartVisibility","storeName","store","loading","menuData","useMenu","spreadsheetId","config","spreadsheets","sheetName","updateStoreItems","cleanCart","Header","handleToggleCart","toggleCartView","role","ShoppingCart","StoreItems","Footer","require","MerchantPage","SEO","title","keywords","url","MerchantStore"],"sourceRoot":""}