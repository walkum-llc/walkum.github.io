{"version":3,"file":"component---src-pages-shopping-js-3480d4f148ace0ef4b8b.js","mappings":"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","sources":["webpack://walkum/./src/styles/shopping.module.css","webpack://walkum/./src/components/OnlineStore/QuantityControl.js","webpack://walkum/./src/components/OnlineStore/itemDetailModal.js","webpack://walkum/./src/components/OnlineStore/storeItems.js","webpack://walkum/./src/components/OnlineStore/checkout/usePaypalButtons.js","webpack://walkum/./src/components/OnlineStore/checkout/index.js","webpack://walkum/./src/components/OnlineStore/checkout/mockPurchase.js","webpack://walkum/./src/components/OnlineStore/checkout/index.module.css","webpack://walkum/./src/components/OnlineStore/cart.js","webpack://walkum/./src/components/OnlineStore/index.js","webpack://walkum/./src/pages/shopping.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var closeButton = \"shopping-module--closeButton--fdfa2\";\nexport var fullScreenImage = \"shopping-module--fullScreenImage--3e206\";\nexport var fullScreenModal = \"shopping-module--fullScreenModal--d5a88\";\nexport var item = \"shopping-module--item--7b82f\";\nexport var itemBackground = \"shopping-module--itemBackground--65546\";\nexport var itemImage = \"shopping-module--itemImage--78d3d\";\nexport var itemList = \"shopping-module--itemList--d6d43\";\nexport var modalContent = \"shopping-module--modalContent--12e4c\";\nexport var removeButton = \"shopping-module--removeButton--04c91\";","import React from \"react\";\n\nconst QuantityControl = ({ quantity, stock, onDecrease, onIncrease }) => (\n    <div>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onDecrease();\n            }}\n\n        >\n            -\n        </button>\n        <span>   {quantity}   </span>\n        <button\n            onClick={(e) => {\n                e.stopPropagation();\n                onIncrease();\n            }}\n        >\n            +\n        </button>\n    </div>\n);\n\nexport default QuantityControl;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemDetailModal = ({\n    item,\n    onClose,\n    handleToggle,\n    handleQuantityChange,\n    isInCart,\n    cart,\n}) => {\n    const itemInCart = cart.find((cartItem) => cartItem.id === item.id); // Get item from cart\n    const [quantity, setQuantity] = useState(itemInCart ? itemInCart.quantity : 1);\n\n    // Synchronize quantity with Redux when the cart updates\n    useEffect(() => {\n        if (itemInCart) {\n            setQuantity(itemInCart.quantity);\n        }\n    }, [itemInCart]);\n\n    const handleQuantityUpdate = (newQuantity) => {\n        const clampedQuantity = Math.min(Math.max(newQuantity, 1), item.stock);\n        setQuantity(clampedQuantity);\n        handleQuantityChange(item, clampedQuantity); // Update Redux store\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                onClose(); // Close modal on Escape key\n            }\n        };\n\n        // Add event listener for Escape key\n        document.addEventListener(\"keydown\", handleKeyDown);\n\n        // Cleanup listener on unmount\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [onClose]);\n\n    return (\n        <div className={styles.fullScreenModal} onClick={onClose}>\n            <div\n                className={styles.modalContent}\n                onClick={(e) => e.stopPropagation()} // Prevent closing on modal content click\n            >\n                <button className={styles.closeButton} onClick={onClose}>\n                    &times; Close\n                </button>\n                <img\n                    src={item.image}\n                    alt={item.name}\n                    className={styles.fullScreenImage}\n                />\n                <h3>{item.name}</h3>\n                <p>{item.description}</p>\n                <p>Price: ${item.price}</p>\n                <p>Stock: {item.stock}</p>\n\n                {isInCart(item.id) && (\n                    <div>\n                        <label htmlFor=\"quantityInput\">Quantity: </label>\n                        <QuantityControl\n                            quantity={quantity}\n                            stock={item.stock}\n                            onDecrease={() => handleQuantityUpdate(quantity - 1)}\n                            onIncrease={() => handleQuantityUpdate(quantity + 1)}\n                        />\n                    </div>\n                )}\n\n                <button\n                    onClick={() => handleToggle(item)}\n                    className={isInCart(item.id) ? styles.removeButton : \"\"}\n                    disabled={item.stock <= 0}\n                >\n                    {isInCart(item.id) ? \"Remove from Cart\" : \"Add to Cart\"}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemDetailModal;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleItemInCart,\n    updateItemQuantity,\n    selectCart,\n} from \"../../state/onlineStoreSlice\";\nimport ItemDetailModal from \"./itemDetailModal\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ItemList = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n    const storeItems = useSelector((state) => state.onlineStore.storeItems);\n\n    const [selectedItem, setSelectedItem] = useState(null);\n    const [isSingleColumn, setIsSingleColumn] = useState(false);\n\n    // Check for single-column layout using a media query\n    useEffect(() => {\n        const checkColumnLayout = () => {\n            const element = document.querySelector(`.${styles.itemList}`);\n            if (element) {\n                const computedStyle = getComputedStyle(element);\n                const gridTemplateColumns = computedStyle.getPropertyValue(\"grid-template-columns\");\n                setIsSingleColumn(gridTemplateColumns.split(\" \").length === 1);\n            }\n        };\n\n        checkColumnLayout();\n        window.addEventListener(\"resize\", checkColumnLayout);\n\n        return () => {\n            window.removeEventListener(\"resize\", checkColumnLayout);\n        };\n    }, []);\n\n    const handleToggle = (item) => {\n        dispatch(toggleItemInCart(item));\n    };\n\n    const handleQuantityChange = (item, quantity) => {\n        dispatch(updateItemQuantity({ id: item.id, quantity }));\n    };\n\n    const isInCart = (id) => cart.some((item) => item.id === id);\n\n    const handleItemClick = (item) => {\n        if (!isSingleColumn) {\n            setSelectedItem(item); // Only allow modal if not single-column\n        }\n    };\n\n    const handleCloseModal = () => {\n        setSelectedItem(null);\n    };\n\n    return (\n        <div className={styles.itemList}>\n            {storeItems.map((item, index) => {\n                const itemInCart = cart.find((cartItem) => cartItem.id === item.id);\n                const quantity = itemInCart ? itemInCart.quantity : 1;\n\n                return (\n                    <div\n                        key={index}\n                        className={styles.item}\n                        onClick={() => handleItemClick(item)}\n                    >\n                        <img\n                            src={item.image}\n                            alt={item.name}\n                            className={styles.itemImage}\n                            width={100}\n                            height={100}\n                        />\n                        <h3>{item.name}</h3>\n                        <p>{item.description}</p>\n                        <p>${item.price}</p>\n                        <p># Remaining: {item.stock}</p>\n\n                        {isInCart(item.id) ? (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                className={styles.removeButton}\n                            >\n                                Remove from Cart\n                            </button>\n                        ) : (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                disabled={item.stock <= 0}\n                            >\n                                Add to Cart\n                            </button>\n                        )}\n\n                        {isInCart(item.id) && (\n                            <QuantityControl\n                                quantity={quantity}\n                                stock={item.stock}\n                                onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                />\n                        )}\n                    </div>\n                );\n            })}\n\n            {!isSingleColumn && selectedItem && (\n                <ItemDetailModal\n                    item={selectedItem}\n                    onClose={handleCloseModal}\n                    handleToggle={handleToggle}\n                    handleQuantityChange={handleQuantityChange}\n                    cart={cart}\n                    isInCart={isInCart}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ItemList;\n","import { useEffect, useRef } from \"react\";\n\nconst usePaypalButtons = ({ cart, paypalRef, onApprove, createOrder }) => {\n    const paypalRenderedRef = useRef(false);\n\n    useEffect(() => {\n        if (paypalRenderedRef.current) {\n            console.log(\"PayPal buttons already rendered. Skipping initialization.\");\n            return;\n        }\n\n        const script = document.createElement(\"script\");\n        script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.PAYPAL_CLIENT_ID}&buyer-country=US&currency=USD&components=buttons&enable-funding=venmo,paylater,card`;\n        script.async = true;\n\n        script.onload = () => {\n            if (window.paypal && paypalRef.current) {\n                paypalRenderedRef.current = true;\n                window.paypal.Buttons({\n                    style: {\n                        shape: \"rect\",\n                        layout: \"vertical\",\n                        color: \"gold\",\n                        label: \"paypal\",\n                    },\n                    createOrder,\n                    onApprove,\n                }).render(paypalRef.current);\n            }\n        };\n\n        document.body.appendChild(script);\n\n        return () => {\n            if (paypalRenderedRef.current) {\n                console.log(\"Cleaning up PayPal buttons.\");\n                paypalRenderedRef.current = false;\n            }\n\n            if (document.body.contains(script)) {\n                document.body.removeChild(script);\n            }\n        };\n    }, [cart, paypalRef, createOrder, onApprove]);\n};\n\nexport default usePaypalButtons;\n","import React, { useRef } from \"react\";\nimport { clearCart } from \"../../../state/onlineStoreSlice\";\nimport { useDispatch } from \"react-redux\";\nimport * as styles from \"./index.module.css\";\nimport usePaypalButtons from \"./usePaypalButtons\";\nimport { handleMockPurchase } from \"./mockPurchase\";\n\nconst PaypalButton = ({ cart }) => {\n    const dispatch = useDispatch();\n    const paypalRef = useRef(null);\n\n    // Handlers for PayPal buttons\n    const createOrder = async (data, actions) => {\n        try {\n            const totalAmount = cart.reduce(\n                (sum, item) => sum + parseFloat(item.price) * item.quantity,\n                0\n            ).toFixed(2);\n\n            const response = await fetch(\"http://localhost:8080/api/orders\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ cart }),\n            });\n\n            const orderData = await response.json();\n            console.log(\"createOrder Response:\", orderData);\n\n            if (orderData.id) {\n                return orderData.id;\n            }\n            throw new Error(\"Failed to create order\");\n        } catch (error) {\n            console.error(\"createOrder Error:\", error);\n            throw new Error(\"Could not initiate PayPal Checkout\");\n        }\n    };\n\n    const onApprove = async (data, actions) => {\n        try {\n            const response = await fetch(\n                `http://localhost:8080/api/orders/${data.orderID}/capture`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                }\n            );\n\n            const orderData = await response.json();\n            console.log(\"onApprove Response:\", orderData);\n\n            if (orderData?.purchase_units?.[0]?.payments?.captures?.[0]) {\n                const transaction =\n                    orderData?.purchase_units?.[0]?.payments?.captures?.[0];\n                console.log(\"Transaction completed:\", transaction);\n\n                dispatch(clearCart());\n            } else {\n                throw new Error(\"Capture failed\");\n            }\n        } catch (error) {\n            console.error(\"onApprove Error:\", error);\n            alert(\"Sorry, your transaction could not be processed.\");\n        }\n    };\n\n    // Initialize PayPal buttons\n    usePaypalButtons({ cart, paypalRef, createOrder, onApprove });\n\n    return (\n        <div>\n            <div ref={paypalRef}></div>\n            <button\n                onClick={() => handleMockPurchase({ cart, dispatch, clearCart })}\n                className={styles.mockButton}\n            >\n                Mock Purchase\n            </button>\n        </div>\n    );\n};\n\nexport default PaypalButton;\n","export const handleMockPurchase = async ({ cart, dispatch, clearCart }) => {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/mock-purchase\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ cart }),\n        });\n        const mockData = await response.json();\n        console.log(\"Mock Purchase Response:\", mockData);\n\n        if (mockData.success) {\n            dispatch(clearCart());\n            alert(\"Mock purchase succeeded!\");\n        } else {\n            throw new Error(\"Mock purchase failed\");\n        }\n    } catch (error) {\n        console.error(\"Mock Purchase Error:\", error);\n        alert(\"Mock purchase failed. Check console for details.\");\n    }\n};\n","// extracted by mini-css-extract-plugin\nexport var mockButton = \"index-module--mockButton--c6f84\";","import * as styles from \"../../styles/shopping.module.css\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCart, updateItemQuantity, toggleItemInCart } from '../../state/onlineStoreSlice';\nimport PayPalButtons from \"./checkout\";\nimport QuantityControl from \"./QuantityControl\";\n\nconst ViewCart = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n\n    const handleQuantityChange = (item, quantity) => {\n        const newQuantity = Math.max(1, Math.min(quantity, item.stock)); // Limit between 1 and stock\n        dispatch(updateItemQuantity({ id: item.id, quantity: newQuantity }));\n    };\n\n    const handleRemoveItem = (item) => {\n        dispatch(toggleItemInCart(item)); // Use toggle to remove item\n    };\n\n    if (!cart || cart.length === 0) {\n        return <p className={styles.emptyCartMessage}>Your cart is empty!</p>;\n    }\n\n    return (\n        <div className={styles.cart}>\n            <h2>Your Cart</h2>\n            <table className={styles.cartTable}>\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th>Price</th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                        <th>Remove</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cart.map((item, index) => {\n                        const price = Number(item.price) || 0;\n                        const quantity = Number(item.quantity) || 0;\n                        const total = price * quantity;\n\n                        return (\n                            <tr key={index}>\n                                <td>{item.name || \"Unnamed Item\"}</td>\n                                <td>${price.toFixed(2)}</td>\n                                <td>\n                                    <QuantityControl\n                                        quantity={quantity}\n                                        stock={item.stock}\n                                        onDecrease={() => handleQuantityChange(item, Math.max(1, quantity - 1))}\n                                        onIncrease={() => handleQuantityChange(item, Math.min(item.stock, quantity + 1))}\n                                        />\n                                </td>\n                                <td>${total.toFixed(2)}</td>\n                                <td>\n                                    <button\n                                        onClick={() => handleRemoveItem(item)}\n                                        className={styles.removeButton}\n                                    >\n                                        Remove\n                                    </button>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <h3 className={styles.grandTotal}>\n                Grand Total: $\n                {cart.reduce(\n                    (total, item) =>\n                        total + (Number(item.price) || 0) * (Number(item.quantity) || 0),\n                    0\n                ).toFixed(2)}\n            </h3>\n\n            <PayPalButtons cart={cart} />\n        </div>\n    );\n};\n\nexport default ViewCart;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport StoreItems from './storeItems';\nimport ShoppingCart from './cart';\nimport {\n    toggleCartView,\n    selectCartVisibility,\n    updateStoreItems,\n    cleanCart,\n} from '../../state/onlineStoreSlice';\nimport config from '../../../config';\nimport * as styles from \"../../styles/shopping.module.css\";\n\nconst fetchSpreadsheetData = async (sheetName) => {\n    const url = `https://docs.google.com/spreadsheets/d/${config.SPREADSHEET_ID_PRODUCTS}/gviz/tq?tqx=out:csv&sheet=${sheetName}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const csvText = await response.text();\n        return parseCSV(csvText);\n    } catch (error) {\n        console.error(`Error fetching spreadsheet data from sheet \"${sheetName}\":`, error);\n        return [];\n    }\n};\n\nconst parseCSV = (csv) => {\n    const rows = csv.trim().split(\"\\n\");\n    const headers = rows.shift().split(\",\").map(h => h.replace(/(^\"|\"$)/g, \"\"));\n    return rows.map(row => {\n        const values = row.split(\",\").map(value => value.replace(/(^\"|\"$)/g, \"\"));\n        const obj = {};\n        headers.forEach((header, index) => {\n            if (header) {\n                obj[header] = values[index] || null;\n            }\n        });\n        return obj;\n    });\n};\n\nconst ShoppingPage = () => {\n    const dispatch = useDispatch();\n    const isCartVisible = useSelector(selectCartVisibility);\n\n    useEffect(() => {\n        const loadItems = async () => {\n            const data = await fetchSpreadsheetData(config.PRODUCTS_SHEETNAME);\n            dispatch(updateStoreItems(data));\n            dispatch(cleanCart()); // Validate cart after store items update\n        };\n\n        loadItems();\n    }, [dispatch]);\n\n    const handleToggleCart = () => {\n        dispatch(toggleCartView());\n    };\n\n    return (\n        <div>\n            <h1>Shopping Page</h1>\n            <button className={styles.cartToggleButton} onClick={handleToggleCart}>\n                {isCartVisible ? 'Hide Cart' : 'View Cart'}\n            </button>\n            {isCartVisible && <ShoppingCart />}\n            <div className={styles.itemListContainer}>\n                <StoreItems />\n            </div>\n        </div>\n    );\n};\n\nexport default ShoppingPage;\n","import React from \"react\";\nimport OnlineStore from \"../components/OnlineStore\"\n\nconst ShoppingPage = () => {\n\n    return <OnlineStore />\n};\n\nexport default ShoppingPage;\n"],"names":["closeButton","fullScreenImage","fullScreenModal","itemImage","itemList","modalContent","removeButton","_ref","quantity","stock","onDecrease","onIncrease","React","onClick","e","stopPropagation","item","onClose","handleToggle","handleQuantityChange","isInCart","cart","itemInCart","find","cartItem","id","setQuantity","useState","useEffect","handleQuantityUpdate","newQuantity","clampedQuantity","Math","min","max","handleKeyDown","event","key","document","addEventListener","removeEventListener","className","styles","src","image","alt","name","description","price","htmlFor","QuantityControl","disabled","ItemList","dispatch","useDispatch","useSelector","selectCart","storeItems","state","onlineStore","selectedItem","setSelectedItem","isSingleColumn","setIsSingleColumn","checkColumnLayout","element","querySelector","gridTemplateColumns","getComputedStyle","getPropertyValue","split","length","window","toggleItemInCart","updateItemQuantity","some","map","index","handleItemClick","width","height","ItemDetailModal","handleCloseModal","paypalRef","onApprove","createOrder","paypalRenderedRef","useRef","current","console","log","script","createElement","async","onload","paypal","Buttons","style","shape","layout","color","label","render","body","appendChild","contains","removeChild","usePaypalButtons","data","actions","reduce","sum","parseFloat","toFixed","response","fetch","method","headers","JSON","stringify","orderData","json","Error","error","_orderData$purchase_u","_orderData$purchase_u2","_orderData$purchase_u3","_orderData$purchase_u4","orderID","purchase_units","payments","captures","_orderData$purchase_u5","_orderData$purchase_u6","_orderData$purchase_u7","_orderData$purchase_u8","transaction","clearCart","alert","ref","mockData","success","handleMockPurchase","ViewCart","Number","total","handleRemoveItem","PayPalButtons","parseCSV","csv","rows","trim","shift","h","replace","row","values","value","obj","forEach","header","ShoppingPage","isCartVisible","selectCartVisibility","url","config","SPREADSHEET_ID_PRODUCTS","sheetName","ok","status","csvText","text","fetchSpreadsheetData","PRODUCTS_SHEETNAME","updateStoreItems","cleanCart","loadItems","handleToggleCart","toggleCartView","ShoppingCart","StoreItems","OnlineStore"],"sourceRoot":""}