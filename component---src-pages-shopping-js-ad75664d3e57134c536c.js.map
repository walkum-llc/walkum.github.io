{"version":3,"file":"component---src-pages-shopping-js-ad75664d3e57134c536c.js","mappings":"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","sources":["webpack://walkum/./src/styles/shopping.module.css","webpack://walkum/./src/components/OnlineStore/itemDetailModal.js","webpack://walkum/./src/components/OnlineStore/storeItems.js","webpack://walkum/./src/components/OnlineStore/cart.js","webpack://walkum/./src/components/OnlineStore/index.js","webpack://walkum/./src/pages/shopping.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var closeButton = \"shopping-module--closeButton--fdfa2\";\nexport var fullScreenImage = \"shopping-module--fullScreenImage--3e206\";\nexport var fullScreenModal = \"shopping-module--fullScreenModal--d5a88\";\nexport var item = \"shopping-module--item--7b82f\";\nexport var itemBackground = \"shopping-module--itemBackground--65546\";\nexport var itemImage = \"shopping-module--itemImage--78d3d\";\nexport var itemList = \"shopping-module--itemList--d6d43\";\nexport var modalContent = \"shopping-module--modalContent--12e4c\";\nexport var removeButton = \"shopping-module--removeButton--04c91\";","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState, useEffect } from \"react\";\n\nconst ItemDetailModal = ({\n    item,\n    onClose,\n    handleToggle,\n    handleQuantityChange,\n    isInCart,\n    cart,\n}) => {\n    const itemInCart = cart.find((cartItem) => cartItem.id === item.id); // Get item from cart\n    const initialQuantity = itemInCart ? itemInCart.quantity : 1; // Default to 1 if not in cart\n\n    const [quantity, setQuantity] = useState(initialQuantity); // Set initial quantity from cart\n\n    const handleQuantityUpdate = (e) => {\n        const newQuantity = Math.min(Math.max(parseInt(e.target.value, 10), 1), item.stock); // Clamp to valid range\n        setQuantity(newQuantity);\n        handleQuantityChange(item, newQuantity);\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                onClose(); // Close modal on Escape key\n            }\n        };\n\n        // Add event listener\n        document.addEventListener(\"keydown\", handleKeyDown);\n\n        // Cleanup listener on unmount\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [onClose]);\n\n    return (\n        <div className={styles.fullScreenModal} onClick={onClose}>\n            <div\n                className={styles.modalContent}\n                onClick={(e) => e.stopPropagation()} // Prevent closing on modal content click\n            >\n                <button className={styles.closeButton} onClick={onClose}>\n                    &times; Close\n                </button>\n                <img\n                    src={item.image}\n                    alt={item.name}\n                    className={styles.fullScreenImage}\n                />\n                <h3>{item.name}</h3>\n                <p>{item.description}</p>\n                <p>Price: ${item.price}</p>\n                <p>Stock: {item.stock}</p>\n\n                {isInCart(item.id) && (\n                    <div>\n                        <label htmlFor=\"quantityInput\">Quantity: </label>\n                        <input\n                            id=\"quantityInput\"\n                            type=\"number\"\n                            value={quantity}\n                            onChange={handleQuantityUpdate}\n                            min=\"1\"\n                            max={item.stock}\n                        />\n                    </div>\n                )}\n\n                <button\n                    onClick={() => handleToggle(item)}\n                    className={isInCart(item.id) ? styles.removeButton : \"\"}\n                    disabled={item.stock <= 0}\n                >\n                    {isInCart(item.id) ? \"Remove from Cart\" : \"Add to Cart\"}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemDetailModal;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleItemInCart,\n    updateItemQuantity,\n    selectCart,\n} from \"../../state/onlineStoreSlice\";\nimport ItemDetailModal from \"./itemDetailModal\";\n\nconst ItemList = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n    const storeItems = useSelector((state) => state.onlineStore.storeItems);\n\n    const [selectedItem, setSelectedItem] = useState(null);\n\n    const handleToggle = (item) => {\n        dispatch(toggleItemInCart(item));\n    };\n\n    const handleQuantityChange = (item, quantity) => {\n        dispatch(updateItemQuantity({ id: item.id, quantity: parseInt(quantity, 10) }));\n    };\n\n    const isInCart = (id) => cart.some((item) => item.id === id);\n\n    const handleItemClick = (item) => {\n        setSelectedItem(item);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedItem(null);\n    };\n\n    return (\n        <div className={styles.itemList}>\n            {storeItems.map((item, index) => {\n                const itemInCart = cart.find((cartItem) => cartItem.id === item.id);\n                const quantity = itemInCart ? itemInCart.quantity : 1;\n\n                return (\n                    <div\n                        key={index}\n                        className={styles.item}\n                        onClick={() => handleItemClick(item)}\n                    >\n                        <img\n                            src={item.image}\n                            alt={item.name}\n                            className={styles.itemImage}\n                            width={100}\n                            height={100}\n                        />\n                        <h3>{item.name}</h3>\n                        <p>{item.description}</p>\n                        <p>${item.price}</p>\n                        <p># Remaining: {item.stock}</p>\n\n                        {isInCart(item.id) ? (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                className={styles.removeButton}\n                            >\n                                Remove from Cart\n                            </button>\n                        ) : (\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleToggle(item);\n                                }}\n                                disabled={item.stock <= 0}\n                            >\n                                Add to Cart\n                            </button>\n                        )}\n\n                        {isInCart(item.id) && (\n                            <div>\n                                <label>Quantity: </label>\n                                <input\n                                    type=\"number\"\n                                    value={quantity}\n                                    onChange={(e) => handleQuantityChange(item, e.target.value)}\n                                    min=\"1\"\n                                    max={item.stock}\n                                    onClick={(e) => e.stopPropagation()}\n                                />\n                            </div>\n                        )}\n                    </div>\n                );\n            })}\n\n            {selectedItem && (\n                <ItemDetailModal\n                    item={selectedItem}\n                    onClose={handleCloseModal}\n                    handleToggle={handleToggle}\n                    handleQuantityChange={handleQuantityChange}\n                    cart={cart}\n                    isInCart={isInCart}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ItemList;\n","import * as styles from \"../../styles/shopping.module.css\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCart, updateItemQuantity, toggleItemInCart } from '../../state/onlineStoreSlice';\n\nconst ViewCart = () => {\n    const dispatch = useDispatch();\n    const cart = useSelector(selectCart);\n\n    const handleQuantityChange = (item, quantity) => {\n        const newQuantity = Math.max(1, Math.min(quantity, item.stock)); // Limit between 1 and stock\n        dispatch(updateItemQuantity({ id: item.id, quantity: newQuantity }));\n    };\n\n    const handleRemoveItem = (item) => {\n        dispatch(toggleItemInCart(item)); // Use toggle to remove item\n    };\n\n    if (!cart || cart.length === 0) {\n        return <p className={styles.emptyCartMessage}>Your cart is empty!</p>;\n    }\n\n    return (\n        <div className={styles.cart}>\n            <h2>Your Cart</h2>\n            <table className={styles.cartTable}>\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th>Price</th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                        <th>Remove</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cart.map((item, index) => {\n                        const price = Number(item.price) || 0;\n                        const quantity = Number(item.quantity) || 0;\n                        const total = price * quantity;\n\n                        return (\n                            <tr key={index}>\n                                <td>{item.name || \"Unnamed Item\"}</td>\n                                <td>${price.toFixed(2)}</td>\n                                <td>\n                                    <input\n                                        type=\"number\"\n                                        value={quantity}\n                                        onChange={(e) => handleQuantityChange(item, parseInt(e.target.value, 10))}\n                                        min=\"1\"\n                                        max={item.stock}\n                                    />\n                                </td>\n                                <td>${total.toFixed(2)}</td>\n                                <td>\n                                    <button\n                                        onClick={() => handleRemoveItem(item)}\n                                        className={styles.removeButton}\n                                    >\n                                        Remove\n                                    </button>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <h3 className={styles.grandTotal}>\n                Grand Total: $\n                {cart.reduce(\n                    (total, item) =>\n                        total + (Number(item.price) || 0) * (Number(item.quantity) || 0),\n                    0\n                ).toFixed(2)}\n            </h3>\n        </div>\n    );\n};\n\nexport default ViewCart;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport StoreItems from './storeItems';\nimport ShoppingCart from './cart';\nimport {\n    toggleCartView,\n    selectCartVisibility,\n    updateStoreItems,\n    cleanCart,\n} from '../../state/onlineStoreSlice';\nimport config from '../../../config';\nimport * as styles from \"../../styles/shopping.module.css\";\n\nconst fetchSpreadsheetData = async (sheetName) => {\n    const url = `https://docs.google.com/spreadsheets/d/${config.SPREADSHEET_ID_PRODUCTS}/gviz/tq?tqx=out:csv&sheet=${sheetName}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const csvText = await response.text();\n        return parseCSV(csvText);\n    } catch (error) {\n        console.error(`Error fetching spreadsheet data from sheet \"${sheetName}\":`, error);\n        return [];\n    }\n};\n\nconst parseCSV = (csv) => {\n    const rows = csv.trim().split(\"\\n\");\n    const headers = rows.shift().split(\",\").map(h => h.replace(/(^\"|\"$)/g, \"\"));\n    return rows.map(row => {\n        const values = row.split(\",\").map(value => value.replace(/(^\"|\"$)/g, \"\"));\n        const obj = {};\n        headers.forEach((header, index) => {\n            if (header) {\n                obj[header] = values[index] || null;\n            }\n        });\n        return obj;\n    });\n};\n\nconst ShoppingPage = () => {\n    const dispatch = useDispatch();\n    const isCartVisible = useSelector(selectCartVisibility);\n\n    useEffect(() => {\n        const loadItems = async () => {\n            const data = await fetchSpreadsheetData(config.PRODUCTS_SHEETNAME);\n            dispatch(updateStoreItems(data));\n            dispatch(cleanCart()); // Validate cart after store items update\n        };\n\n        loadItems();\n    }, [dispatch]);\n\n    const handleToggleCart = () => {\n        dispatch(toggleCartView());\n    };\n\n    return (\n        <div>\n            <h1>Shopping Page</h1>\n            <button className={styles.cartToggleButton} onClick={handleToggleCart}>\n                {isCartVisible ? 'Hide Cart' : 'View Cart'}\n            </button>\n            {isCartVisible && <ShoppingCart />}\n            <div className={styles.itemListContainer}>\n                <StoreItems />\n            </div>\n        </div>\n    );\n};\n\nexport default ShoppingPage;\n","import React from \"react\";\nimport OnlineStore from \"../components/OnlineStore\"\n\nconst ShoppingPage = () => {\n\n    return <OnlineStore />\n};\n\nexport default ShoppingPage;\n"],"names":["closeButton","fullScreenImage","fullScreenModal","itemImage","itemList","modalContent","removeButton","_ref","item","onClose","handleToggle","handleQuantityChange","isInCart","cart","itemInCart","find","cartItem","id","initialQuantity","quantity","setQuantity","useState","useEffect","handleKeyDown","event","key","document","addEventListener","removeEventListener","React","className","styles","onClick","e","stopPropagation","src","image","alt","name","description","price","stock","htmlFor","type","value","onChange","newQuantity","Math","min","max","parseInt","target","disabled","ItemList","dispatch","useDispatch","useSelector","selectCart","storeItems","state","onlineStore","selectedItem","setSelectedItem","toggleItemInCart","updateItemQuantity","some","map","index","handleItemClick","width","height","ItemDetailModal","handleCloseModal","ViewCart","length","Number","total","toFixed","handleRemoveItem","reduce","parseCSV","csv","rows","trim","split","headers","shift","h","replace","row","values","obj","forEach","header","ShoppingPage","isCartVisible","selectCartVisibility","async","data","url","config","SPREADSHEET_ID_PRODUCTS","sheetName","response","fetch","ok","Error","status","csvText","text","error","console","fetchSpreadsheetData","PRODUCTS_SHEETNAME","updateStoreItems","cleanCart","loadItems","handleToggleCart","toggleCartView","ShoppingCart","StoreItems","OnlineStore"],"sourceRoot":""}